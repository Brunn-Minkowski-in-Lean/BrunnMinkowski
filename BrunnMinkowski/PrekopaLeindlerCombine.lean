import Mathlib

import BrunnMinkowski.PrekopaLeindler

section

open MeasureTheory

variable {Œπ : Type*} [Fintype Œπ] {Œ∫ : Type*} [Fintype Œ∫]

theorem Nat.induction_on_add
    {p : ‚Ñï ‚Üí Prop} (n : ‚Ñï) (hzero : p 0) (hone : p 1)
    (hadd : ‚àÄ ‚¶Én‚¶Ñ, p n ‚Üí ‚àÄ ‚¶Ém‚¶Ñ, p m ‚Üí p (n + m)) :
    p n := by
  induction n <;> simp_all only

@[simp]
theorem volume_univ_eq_of_pi_empty {Œ± : Type*} [Fintype Œ±] [IsEmpty Œ±] :
    volume (@Set.univ (Œ± ‚Üí ‚Ñù)) = 1 := by
  simp only [volume_pi, Measure.pi_empty_univ]

@[simp]
theorem EuclideanSpace.volume_univ_eq_one_of_rank_zero {Œπ : Type*} [Fintype Œπ] [IsEmpty Œπ] :
    volume (@Set.univ (EuclideanSpace ‚Ñù Œπ)) = 1 := by
  simp only [volume_euclideanSpace_eq_dirac, measure_univ]

@[simp]
theorem EuclideanSpace.volume_real_univ_eq_one_of_rank_zero {Œπ : Type*} [Fintype Œπ] [IsEmpty Œπ] :
    volume.real (@Set.univ (EuclideanSpace ‚Ñù Œπ)) = 1 := by
  simp only [measureReal_def, volume_univ_eq_one_of_rank_zero, ENNReal.toReal_one]

instance EuclideanSpace.instUnique {ùïú Œπ : Type*} [Fintype Œπ] [IsEmpty Œπ] :
    Unique (EuclideanSpace ùïú Œπ) :=
  Pi.uniqueOfIsEmpty _

@[simp]
theorem EuclideanSpace.integral_of_empty_eq_one
    {Œπ : Type*} [Fintype Œπ] [IsEmpty Œπ] (f : EuclideanSpace ‚Ñù Œπ ‚Üí ‚Ñù) :
    ‚à´ (x : EuclideanSpace ‚Ñù Œπ), f x = f 0 := by
  simp [integral_unique, default, isEmptyElim]
  congr; funext; simp only [PiLp.zero_apply]; tauto

theorem _root_.ENNReal.ofReal_rpow {p : ‚Ñù} (hp : 0 ‚â§ p) {r : ‚Ñù} (hr : 0 ‚â§ r):
    ENNReal.ofReal (p ^ r) = ENNReal.ofReal p ^ r :=
  (ENNReal.ofReal_rpow_of_nonneg hp hr).symm

theorem prekopa_leindler
    {t : ‚Ñù} (ht‚ÇÅ : 0 < t) (ht‚ÇÇ : t < 1) {d : ‚Ñï}
    {f : EuclideanSpace ‚Ñù (Fin d) ‚Üí ‚Ñù} (hf‚ÇÅ : 0 ‚â§ f) (hf‚ÇÇ : Integrable f)
    {g : EuclideanSpace ‚Ñù (Fin d) ‚Üí ‚Ñù} (hg‚ÇÅ : 0 ‚â§ g) (hg‚ÇÇ : Integrable g)
    {h : EuclideanSpace ‚Ñù (Fin d) ‚Üí ‚Ñù} (hh‚ÇÅ : 0 ‚â§ h) (hh‚ÇÇ : Integrable h)
    (h‚ÇÄ : ‚àÄ x y, (f x) ^ (1 - t) * (g y) ^ t ‚â§ h (x + y)) :
    (‚à´ x, f x) ^ (1 - t) * (‚à´ y, g y) ^ t ‚â§
    (1 - t) ^ (d * (1 - t)) * t ^ (d * t) * (‚à´ z, h z) := by
  sorry

theorem prekopa_leindler_add
    {t : ‚Ñù} (ht‚ÇÅ : 0 < t) (ht‚ÇÇ : t < 1)
    (hŒπ : {f : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù} ‚Üí Integrable f ‚Üí 0 ‚â§ f ‚Üí
          {g : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù} ‚Üí Integrable g ‚Üí 0 ‚â§ g ‚Üí
          {h : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù} ‚Üí Integrable h ‚Üí
          (‚àÄ {x y}, (f x) ^ (1 - t) * (g y) ^ t ‚â§ h (x + y)) ‚Üí
          (‚à´ x, f x) ^ (1 - t) * (‚à´ y, g y) ^ t ‚â§
          (1 - t) ^ ((1 - t) * Fintype.card Œπ) * t ^ (t * Fintype.card Œπ) * (‚à´ z, h z))
    (hŒ∫ : {f : (Œ∫ ‚Üí ‚Ñù) ‚Üí ‚Ñù} ‚Üí Integrable f ‚Üí 0 ‚â§ f ‚Üí
          {g : (Œ∫ ‚Üí ‚Ñù) ‚Üí ‚Ñù} ‚Üí Integrable g ‚Üí 0 ‚â§ g ‚Üí
          {h : (Œ∫ ‚Üí ‚Ñù) ‚Üí ‚Ñù} ‚Üí Integrable h ‚Üí
          (‚àÄ {x y}, (f x) ^ (1 - t) * (g y) ^ t ‚â§ h (x + y)) ‚Üí
          (‚à´ x, f x) ^ (1 - t) * (‚à´ y, g y) ^ t ‚â§
          (1 - t) ^ ((1 - t) * Fintype.card Œ∫) * t ^ (t * Fintype.card Œ∫) * (‚à´ z, h z))
    {f : ((Œπ ‚äï Œ∫) ‚Üí ‚Ñù) ‚Üí ‚Ñù} (hf‚ÇÅ : Integrable f) (hf‚ÇÇ : 0 ‚â§ f)
    {g : ((Œπ ‚äï Œ∫) ‚Üí ‚Ñù) ‚Üí ‚Ñù} (hg‚ÇÅ : Integrable g) (hg‚ÇÇ : 0 ‚â§ g)
    {h : ((Œπ ‚äï Œ∫) ‚Üí ‚Ñù) ‚Üí ‚Ñù} (hh‚ÇÅ : Integrable h)
    (h‚ÇÄ : ‚àÄ {x y}, (f x) ^ (1 - t) * (g y) ^ t ‚â§ h (x + y)) :
    (‚à´ x, f x) ^ (1 - t) * (‚à´ y, f y) ^ t ‚â§
    (1 - t) ^ ((1 - t) * (Fintype.card Œπ + Fintype.card Œ∫)) *
    t ^ (t * (Fintype.card Œπ + Fintype.card Œ∫)) * (‚à´ z, h z) := by
  sorry

theorem helper_lemma‚ÇÅ (f : EuclideanSpace ‚Ñù Œπ ‚Üí ‚Ñù) :
    ‚à´ (x : EuclideanSpace ‚Ñù Œπ), f x = ‚à´ (x : Œπ ‚Üí ‚Ñù), f x := by
  have := MeasurePreserving.integral_comp
    (EuclideanSpace.volume_preserving_measurableEquiv Œπ).symm
    (MeasurableEquiv.measurableEmbedding (EuclideanSpace.measurableEquiv Œπ).symm) f
  rw [‚Üê this]; rfl

theorem helper_lemma‚ÇÅ' (f : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù) :
    ‚à´ (x : EuclideanSpace ‚Ñù Œπ), f x = ‚à´ (x : Œπ ‚Üí ‚Ñù), f x :=
  helper_lemma‚ÇÅ f

theorem helper_lemma‚ÇÅ'' (f : EuclideanSpace ‚Ñù Œπ ‚Üí ENNReal) :
    ‚à´‚Åª x, f x = ‚à´‚Åª (x : Œπ ‚Üí ‚Ñù), f x ‚àÇ(volume : Measure (Œπ ‚Üí ‚Ñù)) := by
  apply MeasurePreserving.lintegral_comp_emb
  ¬∑ rw [‚Üê (EuclideanSpace.volume_preserving_measurableEquiv Œπ).map_eq]; tauto
  ¬∑ exact Measurable.measurableEmbedding (fun ‚¶É_‚¶Ñ ‚Ü¶ id) fun ‚¶É_ _‚¶Ñ ‚Ü¶ id

theorem helper_lemma‚ÇÇ (f : EuclideanSpace ‚Ñù Œπ ‚Üí ‚Ñù) :
    Integrable f (volume : Measure (EuclideanSpace ‚Ñù Œπ)) ‚Üî
    Integrable f (volume : Measure (Œπ ‚Üí ‚Ñù)) := by
  rw [‚Üê MeasurePreserving.integrable_comp_emb
    (EuclideanSpace.volume_preserving_measurableEquiv Œπ)
    (MeasurableEquiv.measurableEmbedding (EuclideanSpace.measurableEquiv Œπ))]
  rfl

theorem helper_lemma‚ÇÉ (e : Œπ ‚âÉ Œ∫) (f : (Œ∫ ‚Üí ‚Ñù) ‚Üí ‚Ñù) :
    ‚à´ (y : Œπ ‚Üí ‚Ñù), f ((MeasurableEquiv.piCongrLeft (fun _ ‚Ü¶ ‚Ñù) e) y) =
    ‚à´ (x : Œ∫ ‚Üí ‚Ñù), f x := by
  apply MeasurePreserving.integral_comp _
    (MeasurableEquiv.measurableEmbedding (MeasurableEquiv.piCongrLeft (fun _ ‚Ü¶ ‚Ñù) e))
  apply volume_measurePreserving_piCongrLeft

theorem helper_lemma‚ÇÉ' (e : Œπ ‚âÉ Œ∫) (f : (Œ∫ ‚Üí ‚Ñù) ‚Üí ENNReal) :
    ‚à´‚Åª (y : Œπ ‚Üí ‚Ñù), f ((MeasurableEquiv.piCongrLeft (fun _ ‚Ü¶ ‚Ñù) e) y) =
    ‚à´‚Åª (x : Œ∫ ‚Üí ‚Ñù), f x :=
  MeasurePreserving.lintegral_comp_emb
    (volume_measurePreserving_piCongrLeft (fun _ ‚Ü¶ ‚Ñù) e)
    (MeasurableEquiv.measurableEmbedding (MeasurableEquiv.piCongrLeft (fun _ ‚Ü¶ ‚Ñù) e)) _

theorem helper_lemma‚ÇÑ (f : ((Œπ ‚äï Œ∫) ‚Üí ‚Ñù) ‚Üí ‚Ñù) :
    ‚à´ (x : (Œπ ‚äï Œ∫) ‚Üí ‚Ñù), f x =
    ‚à´ (y : (Œπ ‚Üí ‚Ñù) √ó (Œ∫ ‚Üí ‚Ñù)), f ((MeasurableEquiv.sumPiEquivProdPi fun _ : Œπ ‚äï Œ∫ ‚Ü¶ ‚Ñù).symm y) := by
  symm; apply MeasurePreserving.integral_comp
  ¬∑ exact volume_measurePreserving_sumPiEquivProdPi_symm _
  ¬∑ exact MeasurableEquiv.measurableEmbedding _

theorem helper_lemma‚ÇÑ' (f : ((Œπ ‚äï Œ∫) ‚Üí ‚Ñù) ‚Üí ENNReal) :
    ‚à´‚Åª (x : Œπ ‚äï Œ∫ ‚Üí ‚Ñù), f x =
    ‚à´‚Åª (y : (Œπ ‚Üí ‚Ñù) √ó (Œ∫ ‚Üí ‚Ñù)), f ((MeasurableEquiv.sumPiEquivProdPi fun _ ‚Ü¶ ‚Ñù).symm y) :=
  (MeasurePreserving.lintegral_comp_emb (volume_measurePreserving_sumPiEquivProdPi_symm fun _ ‚Ü¶ ‚Ñù)
    (MeasurableEquiv.measurableEmbedding (MeasurableEquiv.sumPiEquivProdPi fun _ ‚Ü¶ ‚Ñù).symm) _).symm

theorem helper_lemma‚ÇÖ (f : (Œπ ‚äï Œ∫ ‚Üí ‚Ñù) ‚Üí ‚Ñù) :
    Integrable f ‚Üî
    Integrable (f ‚àò (MeasurableEquiv.sumPiEquivProdPi fun _ : Œπ ‚äï Œ∫ ‚Ü¶ ‚Ñù).symm) := by
  rw [‚Üê MeasurableEmbedding.integrable_map_iff
    (MeasurableEquiv.sumPiEquivProdPi fun _ ‚Ü¶ ‚Ñù).symm.measurableEmbedding,
    (volume_measurePreserving_sumPiEquivProdPi_symm fun _ : Œπ ‚äï Œ∫ ‚Ü¶ ‚Ñù).map_eq]

theorem helper_lemma‚ÇÜ (h : Œπ ‚âÉ Œ∫) (f : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù) :
    Integrable f ‚Üî
    Integrable (f ‚àò (MeasurableEquiv.piCongrLeft (fun _ ‚Ü¶ ‚Ñù) h).symm) := by
  rw [‚Üê MeasurableEmbedding.integrable_map_iff
    (MeasurableEquiv.measurableEmbedding (MeasurableEquiv.piCongrLeft (fun x ‚Ü¶ ‚Ñù) h).symm)]
  have := (volume_measurePreserving_piCongrLeft (fun _ ‚Ü¶ ‚Ñù) h).symm
  rw [this.map_eq]

theorem helper_lemma‚ÇÜ' (h : Œπ ‚âÉ Œ∫) (f : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù) :
    Integrable f ‚Üî
    Integrable (f ‚àò (MeasurableEquiv.piCongrLeft (fun _ ‚Ü¶ ‚Ñù) h.symm)) := by
  rw [‚Üê MeasurableEmbedding.integrable_map_iff
    (MeasurableEquiv.measurableEmbedding (MeasurableEquiv.piCongrLeft (fun x ‚Ü¶ ‚Ñù) h.symm))]
  have := (volume_measurePreserving_piCongrLeft (fun _ ‚Ü¶ ‚Ñù) h.symm)
  rw [this.map_eq]

universe u in
def helper_def‚ÇÅ {Œπ : Type u} {n m : ‚Ñï} (h : Œπ ‚âÉ Fin n ‚äï Fin m) :
    Œπ ‚âÉ (ULift.{u} (Fin n)) ‚äï (ULift.{u} (Fin m)) where
  toFun i := match h i with | .inl x => .inl ‚ü®x‚ü© | .inr x => .inr ‚ü®x‚ü©
  invFun x := match x with | .inl x => h.symm (.inl x.down) | .inr x => h.symm (.inr x.down)
  left_inv i := by
    match v : h i with
    | .inl x => simp_rw [v, ‚Üê v, Equiv.symm_apply_apply]
    | .inr x => simp_rw [v, ‚Üê v, Equiv.symm_apply_apply]
  right_inv x := by match x with | .inl x => simp | .inr x => simp

universe u in
theorem helper_lemma‚Çá
    {Œπ : Type u} [Fintype Œπ] {Œ∫‚ÇÅ : Type u} [Fintype Œ∫‚ÇÅ] {Œ∫‚ÇÇ : Type u} [Fintype Œ∫‚ÇÇ]
    (h : Œπ ‚âÉ Œ∫‚ÇÅ ‚äï Œ∫‚ÇÇ) {f : EuclideanSpace ‚Ñù Œπ ‚Üí ‚Ñù} (hf : Integrable f (volume : Measure (Œπ ‚Üí ‚Ñù))) :
    Integrable fun x ‚Ü¶ ‚à´ (y : Œ∫‚ÇÇ ‚Üí ‚Ñù), f
      ((MeasurableEquiv.piCongrLeft (fun _ ‚Ü¶ ‚Ñù) h).symm
        ((MeasurableEquiv.sumPiEquivProdPi _).symm (x, y))) := by
  simp_rw [‚Üê @Function.comp_apply _ _ _ f, ‚Üê @Function.comp_apply _ _ _ (f ‚àò _),
    ‚Üê @Function.comp_apply _ _ _ _ (Prod.mk _)]
  apply Integrable.integral_prod_left ((helper_lemma‚ÇÖ _).mp _)
  rwa [‚Üê helper_lemma‚ÇÜ]

universe u in
theorem helper_lemma‚Çà
    {Œπ : Type u} {Œ∫‚ÇÅ : Type u} {Œ∫‚ÇÇ : Type u} [Fintype Œ∫‚ÇÇ] (h : Œπ ‚âÉ Œ∫‚ÇÅ ‚äï Œ∫‚ÇÇ)
    {f : EuclideanSpace ‚Ñù Œπ ‚Üí ‚Ñù} (hf : 0 ‚â§ f) :
    0 ‚â§ fun x ‚Ü¶ ‚à´ (y : Œ∫‚ÇÇ ‚Üí ‚Ñù), f
      ((MeasurableEquiv.piCongrLeft (fun _ ‚Ü¶ ‚Ñù) h).symm
        ((MeasurableEquiv.sumPiEquivProdPi _).symm (x, y))) := by
  intro; simp; apply integral_nonneg; tauto

theorem le_of_eq_of_le_of_eq {Œ± : Type*} [LE Œ±] {a b c d : Œ±}
    (hab : a = b) (hbc : b ‚â§ c) (hcd : c = d) : a ‚â§ d :=
  hab ‚ñ∏ hcd ‚ñ∏ hbc

theorem uncurry_prod_swap {Œ± Œ≤ Œ≥ : Type*} (f : Œ± √ó Œ≤ ‚Üí Œ≥) :
    (Function.uncurry fun x y ‚Ü¶ f (y, x)) = f ‚àò Prod.swap :=
  rfl

/- TODO: in mathlib -/
def LinearIsometryEquiv.prodComm
    (R : Type*) [Semiring R]
    (E‚ÇÅ : Type*) [SeminormedAddCommGroup E‚ÇÅ] [Module R E‚ÇÅ]
    (E‚ÇÇ : Type*) [SeminormedAddCommGroup E‚ÇÇ] [Module R E‚ÇÇ] :
    E‚ÇÅ √ó E‚ÇÇ ‚âÉ‚Çó·µ¢[R] E‚ÇÇ √ó E‚ÇÅ :=
  ‚ü®LinearEquiv.prodComm R E‚ÇÅ E‚ÇÇ, by intro; simp [norm, sup_comm]‚ü©

/- TODO: in mathlib -/
@[simp]
theorem LinearIsometryEquiv.coe_prodComm
    (R : Type*) [Semiring R]
    (E‚ÇÅ : Type*) [SeminormedAddCommGroup E‚ÇÅ] [Module R E‚ÇÅ]
    (E‚ÇÇ : Type*) [SeminormedAddCommGroup E‚ÇÇ] [Module R E‚ÇÇ] :
    (LinearIsometryEquiv.prodComm R E‚ÇÅ E‚ÇÇ : E‚ÇÅ √ó E‚ÇÇ ‚Üí E‚ÇÇ √ó E‚ÇÅ) = Equiv.prodComm E‚ÇÅ E‚ÇÇ :=
  rfl

/- TODO: in mathlib -/
@[simp]
theorem LinearIsometryEquiv.coe_prodComm_symm
    (R : Type*) [Semiring R]
    (E‚ÇÅ : Type*) [SeminormedAddCommGroup E‚ÇÅ] [Module R E‚ÇÅ]
    (E‚ÇÇ : Type*) [SeminormedAddCommGroup E‚ÇÇ] [Module R E‚ÇÇ] :
    ((LinearIsometryEquiv.prodComm R E‚ÇÅ E‚ÇÇ).symm : E‚ÇÇ √ó E‚ÇÅ ‚Üí E‚ÇÅ √ó E‚ÇÇ) =
    (Equiv.prodComm E‚ÇÅ E‚ÇÇ).symm :=
  rfl

/- TODO: in mathlib -/
@[simp]
theorem LinearIsometryEquiv.prodComm_symm
    (R : Type*) [Semiring R]
    (E‚ÇÅ : Type*) [SeminormedAddCommGroup E‚ÇÅ] [Module R E‚ÇÅ]
    (E‚ÇÇ : Type*) [SeminormedAddCommGroup E‚ÇÇ] [Module R E‚ÇÇ] :
    (LinearIsometryEquiv.prodComm R E‚ÇÅ E‚ÇÇ).symm = LinearIsometryEquiv.prodComm R E‚ÇÇ E‚ÇÅ :=
  rfl

/- TODO: in mathlib -/
@[simp]
theorem Finset.sup_univ_surj
    {Œ± : Type*} [Fintype Œ±] {Œ≤ : Type*} [Fintype Œ≤] {f : Œ± ‚Üí Œ≤} (hf : Function.Surjective f)
    {Œ≥ : Type*} [SemilatticeSup Œ≥] [OrderBot Œ≥] (g : Œ≤ ‚Üí Œ≥) :
    univ.sup (g ‚àò f) = univ.sup g := by
  apply le_antisymm
  ¬∑ simp; intro; apply le_sup; exact mem_univ _
  ¬∑ simp; intro x; rcases hf x with ‚ü®a, rfl‚ü©
    rw [‚Üê @Function.comp_apply _ _ _ g]
    exact le_sup (mem_univ _)

/- TODO: in mathlib? PiLp.equiv‚Çó·µ¢ -/
def LinearIsometryEquiv.piCongrLeft
    (ùïú : Type*) [Semiring ùïú] {Œπ : Type*} [Fintype Œπ] {Œπ' : Type*} [Fintype Œπ']
    (E : Type*) [SemilatticeSup E] [SeminormedAddCommGroup E] [Module ùïú E]
    (e : Œπ ‚âÉ Œπ') :
    (Œπ ‚Üí E) ‚âÉ‚Çó·µ¢[ùïú] (Œπ' ‚Üí E) where
  toLinearEquiv := LinearEquiv.piCongrLeft' ùïú (fun _ ‚Ü¶ E) e
  norm_map' x := by
    simp [LinearEquiv.piCongrLeft', Equiv.piCongrLeft', norm]
    exact Finset.sup_univ_surj e.symm.surjective fun b ‚Ü¶ ‚Äñx b‚Äñ‚Çä

theorem piCongrLeft_linearIsometryEquiv_measurableEquiv_coe
    (ùïú : Type*) [Semiring ùïú] {Œπ : Type*} [Fintype Œπ] {Œπ' : Type*} [Fintype Œπ']
    (E : Type*) [SemilatticeSup E] [SeminormedAddCommGroup E] [Module ùïú E] [MeasurableSpace E]
    (e : Œπ ‚âÉ Œπ') :
    (LinearIsometryEquiv.piCongrLeft ùïú E e : (Œπ ‚Üí E) ‚Üí Œπ' ‚Üí E) =
    (MeasurableEquiv.piCongrLeft (fun _ ‚Ü¶ E) e : (Œπ ‚Üí E) ‚Üí Œπ' ‚Üí E) := by
  simp [LinearIsometryEquiv.piCongrLeft, MeasurableEquiv.piCongrLeft, LinearEquiv.piCongrLeft',
    Equiv.piCongrLeft]

theorem LinearIsometryEquiv.coe_piCongrLeft
    (ùïú : Type*) [Semiring ùïú] {Œπ : Type*} [Fintype Œπ] {Œπ' : Type*} [Fintype Œπ']
    (E : Type*) [SemilatticeSup E] [SeminormedAddCommGroup E] [Module ùïú E]
    (e : Œπ ‚âÉ Œπ') :
    (LinearIsometryEquiv.piCongrLeft ùïú E e : (Œπ ‚Üí E) ‚Üí Œπ' ‚Üí E) =
    Equiv.piCongrLeft (fun _ ‚Ü¶ E) e := by
  simp [LinearIsometryEquiv.piCongrLeft, LinearEquiv.piCongrLeft', Equiv.piCongrLeft]

theorem helper_lemma‚Çâ
    {f : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù} {n m : ‚Ñï} (h‚ÇÅ : Integrable f volume)
    (h‚ÇÇ : Œπ ‚âÉ ULift.{u} (Fin n) ‚äï ULift.{u} (Fin m)) :
    Integrable
      (f ‚àò ‚áë(MeasurableEquiv.piCongrLeft (fun _ ‚Ü¶ ‚Ñù) h‚ÇÇ.symm) ‚àò
        ‚áë(MeasurableEquiv.sumPiEquivProdPi fun _ ‚Ü¶ ‚Ñù).symm)
      (volume.prod volume) := by
  rw [‚Üê Function.comp_assoc]
  apply Integrable.comp_measurable _
    (MeasurableEquiv.measurable (MeasurableEquiv.sumPiEquivProdPi fun _ ‚Ü¶ ‚Ñù).symm)
  apply Integrable.comp_measurable _
    (MeasurableEquiv.measurable (MeasurableEquiv.piCongrLeft (fun x ‚Ü¶ ‚Ñù) h‚ÇÇ.symm))
  have := (measurePreserving_sumPiEquivProdPi fun _ : ULift.{u} (Fin n) ‚äï ULift.{u} (Fin m) ‚Ü¶
    (volume : Measure ‚Ñù)).symm
  have := this.map_eq
  simp_rw [‚Üê volume_pi] at this; rw [this]
  rw [(volume_measurePreserving_piCongrLeft (fun _ : Œπ ‚Ü¶ ‚Ñù) h‚ÇÇ.symm).map_eq]
  exact h‚ÇÅ

theorem helper_lemma‚ÇÅ‚ÇÄ
    {f : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù} {n m : ‚Ñï} (h‚ÇÅ : Integrable f volume)
    (h‚ÇÇ :Œπ ‚âÉ ULift.{u, 0} (Fin n) ‚äï ULift.{u, 0} (Fin m)) :
    Integrable
      (f ‚àò ‚áë(MeasurableEquiv.piCongrLeft (fun _ ‚Ü¶ ‚Ñù) h‚ÇÇ.symm) ‚àò
        ‚áë(MeasurableEquiv.sumPiEquivProdPi fun _ ‚Ü¶ ‚Ñù).symm ‚àò Prod.swap)
      (volume.prod volume) := by
  simp_rw [‚Üê Function.comp_assoc f, ‚Üê Function.comp_assoc]
  apply Integrable.swap
  exact helper_lemma‚Çâ h‚ÇÅ h‚ÇÇ

theorem helper_lemma‚ÇÅ‚ÇÅ (f : ((EuclideanSpace ‚Ñù Œπ) √ó (EuclideanSpace ‚Ñù Œ∫)) ‚Üí ‚Ñù) :
    Integrable f (volume : Measure ((EuclideanSpace ‚Ñù Œπ) √ó (EuclideanSpace ‚Ñù Œ∫))) ‚Üî
    Integrable f (volume : Measure ((Œπ ‚Üí ‚Ñù) √ó (Œ∫ ‚Üí ‚Ñù))) := by
  -- simp_rw [Measure.volume_eq_prod]
  have := MeasurePreserving.prod
    (EuclideanSpace.volume_preserving_measurableEquiv Œπ)
    (EuclideanSpace.volume_preserving_measurableEquiv Œ∫)
  simp_rw [‚Üê Measure.volume_eq_prod] at this
  rw [‚Üê MeasurePreserving.integrable_comp_emb this]; rfl
  exact Measurable.measurableEmbedding (fun ‚¶É_‚¶Ñ ‚Ü¶ id) fun ‚¶É_ _‚¶Ñ ‚Ü¶ id

/- TODO: in mathlib? -/
theorem helper_lemma‚ÇÅ‚ÇÇ {Œ± : Type*} [Mul Œ±] (a : Œ±) {Œ≤ : Type*} (f : Œ≤ ‚Üí Œ±) :
    (fun b ‚Ü¶ a * f b) = (Function.const Œ≤ a) * f :=
  rfl

universe u in
theorem helper_lemma‚ÇÅ‚ÇÉ
    {Œπ : Type u} [Fintype Œπ] {Œ∫‚ÇÅ : Type u} [Fintype Œ∫‚ÇÅ] {Œ∫‚ÇÇ : Type u} [Fintype Œ∫‚ÇÇ]
    (h : Œπ ‚âÉ Œ∫‚ÇÅ ‚äï Œ∫‚ÇÇ) {f : EuclideanSpace ‚Ñù Œπ ‚Üí ‚Ñù} (hf : Measurable f) :
    Measurable fun x ‚Ü¶ ‚à´ (y : Œ∫‚ÇÇ ‚Üí ‚Ñù), f
      ((MeasurableEquiv.piCongrLeft (fun _ ‚Ü¶ ‚Ñù) h).symm
        ((MeasurableEquiv.sumPiEquivProdPi _).symm (x, y))) := by
  refine stronglyMeasurable_iff_measurable.mp (StronglyMeasurable.integral_prod_right
    (stronglyMeasurable_iff_measurable.mpr ?_))
  unfold Function.uncurry; simp only [Prod.mk.eta]
  simp_rw [‚Üê @Function.comp_apply _ _ _ f, ‚Üê @Function.comp_apply _ _ _ (f ‚àò _)]
  exact (MeasurableEquiv.measurable_comp_iff (MeasurableEquiv.sumPiEquivProdPi fun a ‚Ü¶ ‚Ñù).symm).mpr
    ((MeasurableEquiv.measurable_comp_iff (MeasurableEquiv.piCongrLeft (fun x ‚Ü¶ ‚Ñù) h).symm).mpr hf)

omit [Fintype Œπ] in
theorem helper_lemma‚ÇÅ‚ÇÑ
    {f : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù} {n m : ‚Ñï} (h‚ÇÅ : Measurable f)
    (h‚ÇÇ : Œπ ‚âÉ ULift.{u} (Fin n) ‚äï ULift.{u} (Fin m)) :
    Measurable
      (f ‚àò ‚áë(MeasurableEquiv.piCongrLeft (fun _ ‚Ü¶ ‚Ñù) h‚ÇÇ.symm) ‚àò
        ‚áë(MeasurableEquiv.sumPiEquivProdPi fun _ ‚Ü¶ ‚Ñù).symm) := by
  simp_rw [‚Üê Function.comp_assoc, MeasurableEquiv.measurable_comp_iff, h‚ÇÅ]

omit [Fintype Œπ] in
theorem helper_lemma‚ÇÅ‚ÇÖ {Œ± : Type*} [MeasurableSpace Œ±] (f : EuclideanSpace ‚Ñù Œπ ‚Üí Œ±) :
    Measurable f ‚Üî (@Measurable (Œπ ‚Üí ‚Ñù) Œ± _ _ f) := by
  rfl

omit [Fintype Œπ] in
theorem helper_lemma‚ÇÅ‚ÇÜ
    {Œ∫‚ÇÅ : Type*} [Fintype Œ∫‚ÇÅ] {Œ∫‚ÇÇ : Type*} [Fintype Œ∫‚ÇÇ] (e : Œπ ‚âÉ Œ∫‚ÇÅ ‚äï Œ∫‚ÇÇ)
    {f : (Œπ ‚Üí ‚Ñù) ‚Üí ENNReal} (hf : Measurable f) :
    AEMeasurable (fun y ‚Ü¶ f ((MeasurableEquiv.piCongrLeft (fun _ ‚Ü¶ ‚Ñù) e.symm)
      ((MeasurableEquiv.sumPiEquivProdPi fun _ ‚Ü¶ ‚Ñù).symm y))) (volume.prod volume) := by
  apply hf.aemeasurable.comp_measurable
  apply (MeasurableEquiv.piCongrLeft (fun _ ‚Ü¶ ‚Ñù) e.symm).measurable.comp
  exact (MeasurableEquiv.sumPiEquivProdPi fun _ ‚Ü¶ ‚Ñù).symm.measurable

omit [Fintype Œπ] in
theorem helper_lemma‚ÇÅ‚Çá
    {n m : ‚Ñï} (e : Œπ ‚âÉ ULift.{u, 0} (Fin n) ‚äï ULift.{u, 0} (Fin m))
    {f : (Œπ ‚Üí ‚Ñù) ‚Üí ENNReal} (hf : Measurable f) :
    Measurable fun y : ULift.{u} (Fin m) ‚Üí ‚Ñù ‚Ü¶ ‚à´‚Åª (x : ULift.{u} (Fin n) ‚Üí ‚Ñù),
      f ((MeasurableEquiv.piCongrLeft (fun _ ‚Ü¶ ‚Ñù) e.symm)
        ((MeasurableEquiv.sumPiEquivProdPi fun _ ‚Ü¶ ‚Ñù).symm (x, y))) := by
  apply Measurable.lintegral_prod_left
  apply hf.comp; simp_rw [Prod.mk.eta]
  apply (MeasurableEquiv.piCongrLeft (fun _ ‚Ü¶ ‚Ñù) e.symm).measurable.comp
  exact (MeasurableEquiv.sumPiEquivProdPi fun _ ‚Ü¶ ‚Ñù).symm.measurable

omit [Fintype Œπ] in
theorem helper_lemma‚ÇÅ‚Çà
    {n m : ‚Ñï} (e : Œπ ‚âÉ ULift.{u, 0} (Fin n) ‚äï ULift.{u, 0} (Fin m))
    {f : (Œπ ‚Üí ‚Ñù) ‚Üí ENNReal} (hf : Measurable f) (y : ULift.{u, 0} (Fin m) ‚Üí ‚Ñù) :
    Measurable fun x ‚Ü¶ f ((MeasurableEquiv.piCongrLeft (fun _ ‚Ü¶ ‚Ñù) e.symm)
      ((MeasurableEquiv.sumPiEquivProdPi fun _ ‚Ü¶ ‚Ñù).symm (x, y))) := by
  apply hf.comp
  apply (MeasurableEquiv.piCongrLeft (fun _ ‚Ü¶ ‚Ñù) e.symm).measurable.comp
  apply (MeasurableEquiv.sumPiEquivProdPi fun _ ‚Ü¶ ‚Ñù).symm.measurable.comp
  exact measurable_prodMk_right

omit [Fintype Œπ] in
theorem helper_lemma‚ÇÅ‚Çà'
    {n m : ‚Ñï} (e : Œπ ‚âÉ ULift.{u, 0} (Fin n) ‚äï ULift.{u, 0} (Fin m)) (y : ULift.{u, 0} (Fin m) ‚Üí ‚Ñù) :
    Measurable fun x ‚Ü¶ (MeasurableEquiv.piCongrLeft (fun _ ‚Ü¶ ‚Ñù) e.symm)
      ((MeasurableEquiv.sumPiEquivProdPi fun _ ‚Ü¶ ‚Ñù).symm (x, y)) := by
  apply (MeasurableEquiv.piCongrLeft (fun _ ‚Ü¶ ‚Ñù) e.symm).measurable.comp
  apply (MeasurableEquiv.sumPiEquivProdPi fun x ‚Ü¶ ‚Ñù).symm.measurable.comp
  exact measurable_prodMk_right

theorem helper_lemma‚ÇÅ‚Çâ (Œπ : Type*) [Fintype Œπ] (Œ∫ : Type*) [Fintype Œ∫]:
    Measure.QuasiMeasurePreserving (MeasurableEquiv.sumPiEquivProdPi fun (_ : Œπ ‚äï Œ∫) ‚Ü¶ ‚Ñù) :=
  ‚ü®(MeasurableEquiv.sumPiEquivProdPi fun _ ‚Ü¶ ‚Ñù).measurable,
    Measure.absolutelyContinuous_of_eq (volume_measurePreserving_sumPiEquivProdPi fun _ ‚Ü¶ ‚Ñù).map_eq‚ü©

/- Note: `Measurable f` for `f : (Œπ ‚Üí ‚Ñù) ‚Üí ENNReal` implies `StronglyMeasurable f`. -/
set_option maxHeartbeats 0 in
universe u in
theorem prekopa_leindler''
    {Œπ : Type u} [Fintype Œπ]
    {t : ‚Ñù} (ht‚ÇÅ : 0 < t) (ht‚ÇÇ : t < 1)
    {f : (Œπ ‚Üí ‚Ñù) ‚Üí ENNReal} (hf‚ÇÅ : Measurable f)
    {g : (Œπ ‚Üí ‚Ñù) ‚Üí ENNReal} (hg‚ÇÅ : Measurable g)
    {h : (Œπ ‚Üí ‚Ñù) ‚Üí ENNReal} (hh‚ÇÅ : Measurable h)
    (h‚ÇÄ : ‚àÄ·µê (x) (y), (f x) ^ (1 - t) * (g y) ^ t ‚â§ h (x + y)) :
    (‚à´‚Åª x, f x) ^ (1 - t) * (‚à´‚Åª y, g y) ^ t ‚â§
    (ENNReal.ofReal (1 - t)) ^ ((1 - t) * Fintype.card Œπ) *
    (ENNReal.ofReal t) ^ (t * Fintype.card Œπ) * (‚à´‚Åª z, h z) := by
  induction h‚ÇÅ : Fintype.card Œπ using Nat.induction_on_add generalizing Œπ
  case hzero =>
    rw [Fintype.card_eq_zero_iff] at h‚ÇÅ; simp_rw [ae_iff_of_countable] at h‚ÇÄ; simp [Unique.uniq]
    have : {(0 : Œπ ‚Üí ‚Ñù)} = Set.univ := by ext; simp [Unique.uniq]
    simp [this] at h‚ÇÄ; apply le_trans (h‚ÇÄ _ _) (le_of_eq _); congr; simp only [Unique.uniq]
  case hone =>
    sorry
  case hadd n hn m hm i =>
    let e := helper_def‚ÇÅ ((h‚ÇÅ ‚ñ∏ Fintype.equivFin Œπ).trans finSumFinEquiv.symm)
    simp_rw [‚Üê helper_lemma‚ÇÉ' e.symm, helper_lemma‚ÇÑ', Measure.volume_eq_prod] at h‚ÇÄ ‚ä¢
    rw [lintegral_prod_symm, lintegral_prod_symm, lintegral_prod_symm]
    any_goals exact helper_lemma‚ÇÅ‚ÇÜ _ (by assumption)
    simp_rw [Nat.cast_add, mul_add]
    rw [ENNReal.rpow_add (t * _) (t * _) (by simp [ht‚ÇÅ]) (by simp),
      ENNReal.rpow_add ((1 - t) * _) ((1 - t) * _) (by simp [ht‚ÇÇ]) (by simp),
      mul_comm ((ENNReal.ofReal t) ^ _), ‚Üê mul_assoc (_ * _),
      mul_assoc ((ENNReal.ofReal (1 - t)) ^ _), mul_comm ((ENNReal.ofReal (1 - t)) ^ _) (_ * _),
      mul_assoc (((ENNReal.ofReal (1 - t)) ^ _) * _),
      mul_assoc _ (((ENNReal.ofReal (1 - t)) ^ _) * _),
      ‚Üê MeasureTheory.lintegral_const_mul]
    any_goals exact (Measurable.lintegral_prod_right (hh‚ÇÅ.comp
      ((MeasurableEquiv.piCongrLeft (fun _ ‚Ü¶ ‚Ñù) e.symm).measurable.comp
        ((MeasurableEquiv.measurable (MeasurableEquiv.sumPiEquivProdPi fun _ ‚Ü¶ ‚Ñù).symm).comp
          (measurable_swap_iff.mp fun ‚¶É_‚¶Ñ ‚Ü¶ id)))))
    refine hm ?_ ?_ ?_ ?_ (Fintype.card_ulift.{0, u} (Fin m) ‚ñ∏ (Fintype.card_fin m))
    any_goals apply Measurable.const_mul
    any_goals exact helper_lemma‚ÇÅ‚Çá e (by assumption)
    -- filter_upwards with y‚ÇÅ; filter_upwards with y‚ÇÇ
    -- refine hn ?_ ?_ ?_ ?_ (Fintype.card_ulift.{0, u} (Fin n) ‚ñ∏ (Fintype.card_fin n))
    -- any_goals exact helper_lemma‚ÇÅ‚Çà e (by assumption) _
    -- have h‚ÇÇ (x‚ÇÅ x‚ÇÇ : ULift.{u} (Fin n) ‚Üí ‚Ñù) :
    --     (MeasurableEquiv.piCongrLeft (fun _ ‚Ü¶ ‚Ñù) e.symm)
    --       ((MeasurableEquiv.sumPiEquivProdPi fun _ ‚Ü¶ ‚Ñù).symm (x‚ÇÅ + x‚ÇÇ, y‚ÇÅ + y‚ÇÇ)) =
    --     (MeasurableEquiv.piCongrLeft (fun _ ‚Ü¶ ‚Ñù) e.symm)
    --       ((MeasurableEquiv.sumPiEquivProdPi fun _ ‚Ü¶ ‚Ñù).symm (x‚ÇÅ, y‚ÇÅ)) +
    --     (MeasurableEquiv.piCongrLeft (fun _ ‚Ü¶ ‚Ñù) e.symm)
    --       ((MeasurableEquiv.sumPiEquivProdPi fun _ ‚Ü¶ ‚Ñù).symm (x‚ÇÇ, y‚ÇÇ)) := by
    --   simp_rw [MeasurableEquiv.coe_piCongrLeft, ‚Üê LinearIsometryEquiv.coe_piCongrLeft ‚Ñù,
    --     ‚Üê LinearIsometryEquiv.map_add]; congr
    --   simp_rw [MeasurableEquiv.coe_sumPiEquivProdPi_symm]
    --   exact (Equiv.sumPiEquivProdPi fun _ ‚Ü¶ ‚Ñù).symm_apply_eq.mpr rfl
    -- simp_rw [h‚ÇÇ]
    -- -- apply helper_lemma‚ÇÅ‚Çâ h‚ÇÄ
    -- sorry
    -- -- simp_rw [h‚ÇÇ]; simp_rw [Filter.eventually_iff_exists_mem] at h‚ÇÄ ‚ä¢
    -- -- rcases h‚ÇÄ with ‚ü®s‚ÇÅ, hs‚ÇÅ, hs‚ÇÇ‚ü©
    -- -- let f‚ÇÅ x y (s : Set (Œπ ‚Üí ‚Ñù)) := (MeasurableEquiv.piCongrLeft (fun _ ‚Ü¶ ‚Ñù) e.symm)
    -- --   ((MeasurableEquiv.sumPiEquivProdPi fun _ ‚Ü¶ ‚Ñù).symm (x, y)) ‚àà s
    -- -- use fun x ‚Ü¶ f‚ÇÅ x y‚ÇÅ s‚ÇÅ; constructor
    -- -- ¬∑ sorry
    -- -- intro x‚ÇÅ hx‚ÇÅ; rcases hs‚ÇÇ _ hx‚ÇÅ with ‚ü®s‚ÇÇ, hs‚ÇÇ, hs‚ÇÉ‚ü©
    -- -- use fun x ‚Ü¶ f‚ÇÅ x y‚ÇÇ s‚ÇÇ; constructor
    -- -- ¬∑ sorry
    -- -- intro x‚ÇÇ hx‚ÇÇ; exact hs‚ÇÉ _ hx‚ÇÇ
    sorry

theorem prekopa_leindler'
    {Œπ : Type*} [Fintype Œπ]
    {t : ‚Ñù} (ht‚ÇÅ : 0 < t) (ht‚ÇÇ : t < 1)
    {f : EuclideanSpace ‚Ñù Œπ ‚Üí ‚Ñù} (hf‚ÇÅ : HasFiniteIntegral f) (hf‚ÇÇ : Measurable f) (hf‚ÇÉ : 0 ‚â§ f)
    {g : EuclideanSpace ‚Ñù Œπ ‚Üí ‚Ñù} (hg‚ÇÅ : HasFiniteIntegral g) (hg‚ÇÇ : Measurable g) (hg‚ÇÉ : 0 ‚â§ g)
    {h : EuclideanSpace ‚Ñù Œπ ‚Üí ‚Ñù} (hh‚ÇÅ : HasFiniteIntegral h) (hh‚ÇÇ : Measurable h)
    (h‚ÇÄ : ‚àÄ {x y}, (f x) ^ (1 - t) * (g y) ^ t ‚â§ h (x + y)) :
    (‚à´ x, f x) ^ (1 - t) * (‚à´ y, g y) ^ t ‚â§
    (1 - t) ^ ((1 - t) * Fintype.card Œπ) * t ^ (t * Fintype.card Œπ) * (‚à´ z, h z) := by
  have hf' : Measurable fun x ‚Ü¶ENNReal.ofReal (f x) := Measurable.ennreal_ofReal hf‚ÇÇ
  have hg' : Measurable fun x ‚Ü¶ENNReal.ofReal (g x) := Measurable.ennreal_ofReal hg‚ÇÇ
  have hh' : Measurable fun x ‚Ü¶ENNReal.ofReal (h x) := Measurable.ennreal_ofReal hh‚ÇÇ
  have hh‚ÇÉ : 0 ‚â§ h := by
    intro x; rw [Pi.zero_apply, ‚Üê zero_add x]
    refine le_trans (mul_nonneg_iff.mpr (.inl ?_)) h‚ÇÄ
    constructor <;> apply Real.rpow_nonneg <;> tauto
  have hpl := prekopa_leindler'' ht‚ÇÅ ht‚ÇÇ
    (Measurable.ennreal_ofReal hf‚ÇÇ) (Measurable.ennreal_ofReal hg‚ÇÇ) (Measurable.ennreal_ofReal hh‚ÇÇ)
    (by
      filter_upwards with _; filter_upwards with _
      rw [‚Üê ENNReal.ofReal_rpow (hf‚ÇÉ _) (by linarith), ‚Üê ENNReal.ofReal_rpow (hg‚ÇÉ _) (by linarith),
        ‚Üê ENNReal.ofReal_mul (Real.rpow_nonneg (hf‚ÇÉ _) (1 - t))]
      exact ENNReal.ofReal_le_ofReal h‚ÇÄ)
  repeat rw [integral_eq_lintegral_of_nonneg_ae]
  any_goals refine Filter.eventuallyLE_iff_all_subsets.mpr (fun x ‚Ü¶ ?_)
  any_goals filter_upwards with _ _; tauto
  any_goals rw [aestronglyMeasurable_iff_aemeasurable]
  any_goals apply Measurable.aemeasurable (by assumption)
  simp_rw [ENNReal.toReal_rpow, ‚Üê ENNReal.toReal_mul]
  rw [‚Üê ENNReal.toReal_ofReal_mul, ENNReal.toReal_le_toReal]
  any_goals (exact
    mul_nonneg_iff.mpr (.inl
      ‚ü®Real.rpow_nonneg (by linarith) _, Real.rpow_nonneg (by linarith) _‚ü©))
  any_goals apply ENNReal.mul_ne_top
  any_goals exact ENNReal.ofReal_ne_top
  any_goals apply ENNReal.rpow_ne_top_of_nonneg (by linarith)
  any_goals rw [‚Üê lt_top_iff_ne_top]
  any_goals refine Integrable.lintegral_lt_top ‚ü®?_, by assumption‚ü©
  any_goals rw [aestronglyMeasurable_iff_aemeasurable]
  any_goals apply Measurable.aemeasurable (by assumption)
  simp_rw [helper_lemma‚ÇÅ'']
  rw [ENNReal.ofReal_mul, ENNReal.ofReal_rpow, ENNReal.ofReal_rpow]; assumption
  any_goals linarith
  ¬∑ positivity
  ¬∑ exact mul_nonneg_iff.mpr (.inl ‚ü®by linarith, Nat.cast_nonneg _‚ü©)
  ¬∑ exact Real.rpow_nonneg (by linarith) _

end
