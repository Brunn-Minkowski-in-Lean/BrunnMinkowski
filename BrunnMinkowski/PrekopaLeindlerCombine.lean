import Mathlib

import BrunnMinkowski.PrekopaLeindler

section

open MeasureTheory

variable {Œπ : Type*} [Fintype Œπ] {Œ∫ : Type*} [Fintype Œ∫]

theorem Nat.induction_on_add
    {p : ‚Ñï ‚Üí Prop} (n : ‚Ñï) (hzero : p 0) (hone : p 1)
    (hadd : ‚àÄ ‚¶Én‚¶Ñ, p n ‚Üí ‚àÄ ‚¶Ém‚¶Ñ, p m ‚Üí p (n + m)) :
    p n := by
  induction n <;> simp_all only

@[simp]
theorem volume_univ_eq_of_pi_empty {Œ± : Type*} [Fintype Œ±] [IsEmpty Œ±] :
    volume (@Set.univ (Œ± ‚Üí ‚Ñù)) = 1 := by
  simp only [volume_pi, Measure.pi_empty_univ]

@[simp]
theorem EuclideanSpace.volume_univ_eq_one_of_rank_zero {Œπ : Type*} [Fintype Œπ] [IsEmpty Œπ] :
    volume (@Set.univ (EuclideanSpace ‚Ñù Œπ))= 1 := by
  simp only [volume_euclideanSpace_eq_dirac, measure_univ]

@[simp]
theorem EuclideanSpace.integral_of_empty_eq_one
    {Œπ : Type*} [Fintype Œπ] [IsEmpty Œπ] (f : EuclideanSpace ‚Ñù Œπ ‚Üí ‚Ñù) :
    ‚à´ (x : EuclideanSpace ‚Ñù Œπ), f x = f 0 := by
  simp [integral_unique, default, isEmptyElim]
  congr; funext; rw [PiLp.zero_apply]; tauto

theorem prekopa_leindler
    {t : ‚Ñù} (ht‚ÇÅ : 0 < t) (ht‚ÇÇ : t < 1) {d : ‚Ñï}
    {f : EuclideanSpace ‚Ñù (Fin d) ‚Üí ‚Ñù} (hf‚ÇÅ : 0 ‚â§ f) (hf‚ÇÇ : Integrable f)
    {g : EuclideanSpace ‚Ñù (Fin d) ‚Üí ‚Ñù} (hg‚ÇÅ : 0 ‚â§ g) (hg‚ÇÇ : Integrable g)
    {h : EuclideanSpace ‚Ñù (Fin d) ‚Üí ‚Ñù} (hh‚ÇÅ : 0 ‚â§ h) (hh‚ÇÇ : Integrable h)
    (h‚ÇÄ : ‚àÄ x y, (f x) ^ (1 - t) * (g y) ^ t ‚â§ h (x + y)) :
    (‚à´ x, f x) ^ (1 - t) * (‚à´ y, g y) ^ t ‚â§
    (1 - t) ^ (d * (1 - t)) * t ^ (d * t) * (‚à´ z, h z) := by
  sorry

theorem prekopa_leindler_add
    {t : ‚Ñù} (ht‚ÇÅ : 0 < t) (ht‚ÇÇ : t < 1)
    (hŒπ : {f : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù} ‚Üí Integrable f ‚Üí 0 ‚â§ f ‚Üí
          {g : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù} ‚Üí Integrable g ‚Üí 0 ‚â§ g ‚Üí
          {h : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù} ‚Üí Integrable h ‚Üí
          (‚àÄ {x y}, (f x) ^ (1 - t) * (g y) ^ t ‚â§ h (x + y)) ‚Üí
          (‚à´ x, f x) ^ (1 - t) * (‚à´ y, g y) ^ t ‚â§
          (1 - t) ^ ((1 - t) * Fintype.card Œπ) * t ^ (t * Fintype.card Œπ) * (‚à´ z, h z))
    (hŒ∫ : {f : (Œ∫ ‚Üí ‚Ñù) ‚Üí ‚Ñù} ‚Üí Integrable f ‚Üí 0 ‚â§ f ‚Üí
          {g : (Œ∫ ‚Üí ‚Ñù) ‚Üí ‚Ñù} ‚Üí Integrable g ‚Üí 0 ‚â§ g ‚Üí
          {h : (Œ∫ ‚Üí ‚Ñù) ‚Üí ‚Ñù} ‚Üí Integrable h ‚Üí
          (‚àÄ {x y}, (f x) ^ (1 - t) * (g y) ^ t ‚â§ h (x + y)) ‚Üí
          (‚à´ x, f x) ^ (1 - t) * (‚à´ y, g y) ^ t ‚â§
          (1 - t) ^ ((1 - t) * Fintype.card Œ∫) * t ^ (t * Fintype.card Œ∫) * (‚à´ z, h z))
    {f : ((Œπ ‚äï Œ∫) ‚Üí ‚Ñù) ‚Üí ‚Ñù} (hf‚ÇÅ : Integrable f) (hf‚ÇÇ : 0 ‚â§ f)
    {g : ((Œπ ‚äï Œ∫) ‚Üí ‚Ñù) ‚Üí ‚Ñù} (hg‚ÇÅ : Integrable g) (hg‚ÇÇ : 0 ‚â§ g)
    {h : ((Œπ ‚äï Œ∫) ‚Üí ‚Ñù) ‚Üí ‚Ñù} (hh‚ÇÅ : Integrable h)
    (h‚ÇÄ : ‚àÄ {x y}, (f x) ^ (1 - t) * (g y) ^ t ‚â§ h (x + y)) :
    (‚à´ x, f x) ^ (1 - t) * (‚à´ y, f y) ^ t ‚â§
    (1 - t) ^ ((1 - t) * (Fintype.card Œπ + Fintype.card Œ∫)) *
    t ^ (t * (Fintype.card Œπ + Fintype.card Œ∫)) * (‚à´ z, h z) := by
  sorry

theorem helper_lemma‚ÇÅ (f : EuclideanSpace ‚Ñù Œπ ‚Üí ‚Ñù) :
    ‚à´ (x : EuclideanSpace ‚Ñù Œπ), f x = ‚à´ (x : Œπ ‚Üí ‚Ñù), f x := by
  have := MeasurePreserving.integral_comp
    (EuclideanSpace.volume_preserving_measurableEquiv Œπ).symm
    (MeasurableEquiv.measurableEmbedding (EuclideanSpace.measurableEquiv Œπ).symm) f
  rw [‚Üê this]; rfl

theorem helper_lemma‚ÇÅ' (f : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù) :
    ‚à´ (x : EuclideanSpace ‚Ñù Œπ), f x = ‚à´ (x : Œπ ‚Üí ‚Ñù), f x :=
  helper_lemma‚ÇÅ f

theorem helper_lemma‚ÇÇ (f : EuclideanSpace ‚Ñù Œπ ‚Üí ‚Ñù) :
    Integrable f (volume : Measure (EuclideanSpace ‚Ñù Œπ)) ‚Üî
    Integrable f (volume : Measure (Œπ ‚Üí ‚Ñù)) := by
  rw [‚Üê MeasurePreserving.integrable_comp_emb
    (EuclideanSpace.volume_preserving_measurableEquiv Œπ)
    (MeasurableEquiv.measurableEmbedding (EuclideanSpace.measurableEquiv Œπ))]
  rfl

theorem helper_lemma‚ÇÉ (e : Œπ ‚âÉ Œ∫) (f : (Œ∫ ‚Üí ‚Ñù) ‚Üí ‚Ñù) :
    ‚à´ (y : Œπ ‚Üí ‚Ñù), f ((MeasurableEquiv.piCongrLeft (fun _ ‚Ü¶ ‚Ñù) e) y) =
    ‚à´ (x : Œ∫ ‚Üí ‚Ñù), f x := by
  apply MeasurePreserving.integral_comp _
    (MeasurableEquiv.measurableEmbedding (MeasurableEquiv.piCongrLeft (fun _ ‚Ü¶ ‚Ñù) e))
  apply volume_measurePreserving_piCongrLeft

theorem helper_lemma‚ÇÑ (f : ((Œπ ‚äï Œ∫) ‚Üí ‚Ñù) ‚Üí ‚Ñù) :
    ‚à´ (x : (Œπ ‚äï Œ∫) ‚Üí ‚Ñù), f x =
    ‚à´ (y : (Œπ ‚Üí ‚Ñù) √ó (Œ∫ ‚Üí ‚Ñù)), f ((MeasurableEquiv.sumPiEquivProdPi fun _ : Œπ ‚äï Œ∫ ‚Ü¶ ‚Ñù).symm y) := by
  symm; apply MeasurePreserving.integral_comp
  ¬∑ exact volume_measurePreserving_sumPiEquivProdPi_symm _
  ¬∑ exact MeasurableEquiv.measurableEmbedding _

theorem helper_lemma‚ÇÖ (f : (Œπ ‚äï Œ∫ ‚Üí ‚Ñù) ‚Üí ‚Ñù) :
    Integrable f ‚Üî
    Integrable (f ‚àò (MeasurableEquiv.sumPiEquivProdPi fun _ : Œπ ‚äï Œ∫ ‚Ü¶ ‚Ñù).symm) := by
  rw [‚Üê MeasurableEmbedding.integrable_map_iff
    (MeasurableEquiv.sumPiEquivProdPi fun _ ‚Ü¶ ‚Ñù).symm.measurableEmbedding,
    (volume_measurePreserving_sumPiEquivProdPi_symm fun _ : Œπ ‚äï Œ∫ ‚Ü¶ ‚Ñù).map_eq]

theorem helper_lemma‚ÇÜ (h : Œπ ‚âÉ Œ∫) (f : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù) :
    Integrable f ‚Üî
    Integrable (f ‚àò (MeasurableEquiv.piCongrLeft (fun _ ‚Ü¶ ‚Ñù) h).symm) := by
  rw [‚Üê MeasurableEmbedding.integrable_map_iff
    (MeasurableEquiv.measurableEmbedding (MeasurableEquiv.piCongrLeft (fun x ‚Ü¶ ‚Ñù) h).symm)]
  have := (volume_measurePreserving_piCongrLeft (fun _ ‚Ü¶ ‚Ñù) h).symm
  rw [this.map_eq]

theorem helper_lemma‚ÇÜ' (h : Œπ ‚âÉ Œ∫) (f : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù) :
    Integrable f ‚Üî
    Integrable (f ‚àò (MeasurableEquiv.piCongrLeft (fun _ ‚Ü¶ ‚Ñù) h.symm)) := by
  rw [‚Üê MeasurableEmbedding.integrable_map_iff
    (MeasurableEquiv.measurableEmbedding (MeasurableEquiv.piCongrLeft (fun x ‚Ü¶ ‚Ñù) h.symm))]
  have := (volume_measurePreserving_piCongrLeft (fun _ ‚Ü¶ ‚Ñù) h.symm)
  rw [this.map_eq]

universe u in
def helper_def‚ÇÅ {Œπ : Type u} {n m : ‚Ñï} (h : Œπ ‚âÉ Fin n ‚äï Fin m) :
    Œπ ‚âÉ (ULift.{u} (Fin n)) ‚äï (ULift.{u} (Fin m)) where
  toFun i := match h i with | .inl x => .inl ‚ü®x‚ü© | .inr x => .inr ‚ü®x‚ü©
  invFun x := match x with | .inl x => h.symm (.inl x.down) | .inr x => h.symm (.inr x.down)
  left_inv i := by
    match v : h i with
    | .inl x => simp_rw [v, ‚Üê v, Equiv.symm_apply_apply]
    | .inr x => simp_rw [v, ‚Üê v, Equiv.symm_apply_apply]
  right_inv x := by match x with | .inl x => simp | .inr x => simp

universe u in
theorem helper_lemma‚Çá
    {Œπ : Type u} [Fintype Œπ] {Œ∫‚ÇÅ : Type u} [Fintype Œ∫‚ÇÅ] {Œ∫‚ÇÇ : Type u} [Fintype Œ∫‚ÇÇ]
    (h : Œπ ‚âÉ Œ∫‚ÇÅ ‚äï Œ∫‚ÇÇ) {f : EuclideanSpace ‚Ñù Œπ ‚Üí ‚Ñù} (hf : Integrable f (volume : Measure (Œπ ‚Üí ‚Ñù))) :
    Integrable fun x ‚Ü¶ ‚à´ (y : Œ∫‚ÇÇ ‚Üí ‚Ñù), f
      ((MeasurableEquiv.piCongrLeft (fun _ ‚Ü¶ ‚Ñù) h).symm
        ((MeasurableEquiv.sumPiEquivProdPi _).symm (x, y))) := by
  simp_rw [‚Üê @Function.comp_apply _ _ _ f, ‚Üê @Function.comp_apply _ _ _ (f ‚àò _),
    ‚Üê @Function.comp_apply _ _ _ _ (Prod.mk _)]
  apply Integrable.integral_prod_left ((helper_lemma‚ÇÖ _).mp _)
  rwa [‚Üê helper_lemma‚ÇÜ]


universe u in
theorem helper_lemma‚Çà
    {Œπ : Type u} {Œ∫‚ÇÅ : Type u} {Œ∫‚ÇÇ : Type u} [Fintype Œ∫‚ÇÇ] (h : Œπ ‚âÉ Œ∫‚ÇÅ ‚äï Œ∫‚ÇÇ)
    {f : EuclideanSpace ‚Ñù Œπ ‚Üí ‚Ñù} (hf : 0 ‚â§ f) :
    0 ‚â§ fun x ‚Ü¶ ‚à´ (y : Œ∫‚ÇÇ ‚Üí ‚Ñù), f
      ((MeasurableEquiv.piCongrLeft (fun _ ‚Ü¶ ‚Ñù) h).symm
        ((MeasurableEquiv.sumPiEquivProdPi _).symm (x, y))) := by
  intro; simp; apply integral_nonneg; tauto

theorem le_of_eq_of_le_of_eq {Œ± : Type*} [LE Œ±] {a b c d : Œ±}
    (hab : a = b) (hbc : b ‚â§ c) (hcd : c = d) : a ‚â§ d :=
  hab ‚ñ∏ hcd ‚ñ∏ hbc

theorem uncurry_prod_swap {Œ± Œ≤ Œ≥ : Type*} (f : Œ± √ó Œ≤ ‚Üí Œ≥) :
    (Function.uncurry fun x y ‚Ü¶ f (y, x)) = f ‚àò Prod.swap :=
  rfl

/- TODO: in mathlib -/
def LinearIsometryEquiv.prodComm
    (R : Type*) [Semiring R]
    (E‚ÇÅ : Type*) [SeminormedAddCommGroup E‚ÇÅ] [Module R E‚ÇÅ]
    (E‚ÇÇ : Type*) [SeminormedAddCommGroup E‚ÇÇ] [Module R E‚ÇÇ] :
    E‚ÇÅ √ó E‚ÇÇ ‚âÉ‚Çó·µ¢[R] E‚ÇÇ √ó E‚ÇÅ :=
  ‚ü®LinearEquiv.prodComm R E‚ÇÅ E‚ÇÇ, by intro; simp [norm, sup_comm]‚ü©

/- TODO: in mathlib -/
@[simp]
theorem LinearIsometryEquiv.coe_prodComm
    (R : Type*) [Semiring R]
    (E‚ÇÅ : Type*) [SeminormedAddCommGroup E‚ÇÅ] [Module R E‚ÇÅ]
    (E‚ÇÇ : Type*) [SeminormedAddCommGroup E‚ÇÇ] [Module R E‚ÇÇ] :
    (LinearIsometryEquiv.prodComm R E‚ÇÅ E‚ÇÇ : E‚ÇÅ √ó E‚ÇÇ ‚Üí E‚ÇÇ √ó E‚ÇÅ) = Equiv.prodComm E‚ÇÅ E‚ÇÇ :=
  rfl

/- TODO: in mathlib -/
@[simp]
theorem LinearIsometryEquiv.coe_prodComm_symm
    (R : Type*) [Semiring R]
    (E‚ÇÅ : Type*) [SeminormedAddCommGroup E‚ÇÅ] [Module R E‚ÇÅ]
    (E‚ÇÇ : Type*) [SeminormedAddCommGroup E‚ÇÇ] [Module R E‚ÇÇ] :
    ((LinearIsometryEquiv.prodComm R E‚ÇÅ E‚ÇÇ).symm : E‚ÇÇ √ó E‚ÇÅ ‚Üí E‚ÇÅ √ó E‚ÇÇ) =
    (Equiv.prodComm E‚ÇÅ E‚ÇÇ).symm :=
  rfl

/- TODO: in mathlib -/
@[simp]
theorem LinearIsometryEquiv.prodComm_symm
    (R : Type*) [Semiring R]
    (E‚ÇÅ : Type*) [SeminormedAddCommGroup E‚ÇÅ] [Module R E‚ÇÅ]
    (E‚ÇÇ : Type*) [SeminormedAddCommGroup E‚ÇÇ] [Module R E‚ÇÇ] :
    (LinearIsometryEquiv.prodComm R E‚ÇÅ E‚ÇÇ).symm = LinearIsometryEquiv.prodComm R E‚ÇÇ E‚ÇÅ :=
  rfl

/- TODO: in mathlib -/
@[simp]
theorem Finset.sup_univ_surj
    {Œ± : Type*} [Fintype Œ±] {Œ≤ : Type*} [Fintype Œ≤] {f : Œ± ‚Üí Œ≤} (hf : Function.Surjective f)
    {Œ≥ : Type*} [SemilatticeSup Œ≥] [OrderBot Œ≥] (g : Œ≤ ‚Üí Œ≥) :
    univ.sup (g ‚àò f) = univ.sup g := by
  apply le_antisymm
  ¬∑ simp; intro; apply le_sup; exact mem_univ _
  ¬∑ simp; intro x; rcases hf x with ‚ü®a, rfl‚ü©
    rw [‚Üê @Function.comp_apply _ _ _ g]
    exact le_sup (mem_univ _)

/- TODO: in mathlib? PiLp.equiv‚Çó·µ¢ -/
def LinearIsometryEquiv.piCongrLeft
    (ùïú : Type*) [Semiring ùïú] {Œπ : Type*} [Fintype Œπ] {Œπ' : Type*} [Fintype Œπ']
    (E : Type*) [SemilatticeSup E] [SeminormedAddCommGroup E] [Module ùïú E]
    (e : Œπ ‚âÉ Œπ') :
    (Œπ ‚Üí E) ‚âÉ‚Çó·µ¢[ùïú] (Œπ' ‚Üí E) where
  toLinearEquiv := LinearEquiv.piCongrLeft' ùïú (fun _ ‚Ü¶ E) e
  norm_map' x := by
    simp [LinearEquiv.piCongrLeft', Equiv.piCongrLeft', norm]
    exact Finset.sup_univ_surj e.symm.surjective fun b ‚Ü¶ ‚Äñx b‚Äñ‚Çä

theorem piCongrLeft_linearIsometryEquiv_measurableEquiv_coe
    (ùïú : Type*) [Semiring ùïú] {Œπ : Type*} [Fintype Œπ] {Œπ' : Type*} [Fintype Œπ']
    (E : Type*) [SemilatticeSup E] [SeminormedAddCommGroup E] [Module ùïú E] [MeasurableSpace E]
    (e : Œπ ‚âÉ Œπ') :
    (LinearIsometryEquiv.piCongrLeft ùïú E e : (Œπ ‚Üí E) ‚Üí Œπ' ‚Üí E) =
    ((MeasurableEquiv.piCongrLeft (fun _ ‚Ü¶ E) e) : (Œπ ‚Üí E) ‚Üí Œπ' ‚Üí E) := by
  simp [LinearIsometryEquiv.piCongrLeft, MeasurableEquiv.piCongrLeft, LinearEquiv.piCongrLeft',
    Equiv.piCongrLeft]

theorem LinearIsometryEquiv.coe_toEquiv
    (ùïú : Type*) [Semiring ùïú] {Œπ : Type*} [Fintype Œπ] {Œπ' : Type*} [Fintype Œπ']
    (E : Type*) [SemilatticeSup E] [SeminormedAddCommGroup E] [Module ùïú E]
    (e : Œπ ‚âÉ Œπ') :
    (LinearIsometryEquiv.piCongrLeft ùïú E e : (Œπ ‚Üí E) ‚Üí Œπ' ‚Üí E) =
    Equiv.piCongrLeft (fun _ ‚Ü¶ E) e := by
  simp [LinearIsometryEquiv.piCongrLeft, LinearEquiv.piCongrLeft', Equiv.piCongrLeft]

theorem LinearIsometryEquiv.sumPiEquivProdPi
    (ùïú : Type*) [Semiring ùïú] (S T : Type*) (A : S ‚äï T ‚Üí Type*)
    [(st : S ‚äï T) ‚Üí AddCommMonoid (A st)] [(st : S ‚äï T) ‚Üí Module ùïú (A st)] :
    ((st : S ‚äï T) ‚Üí A st) ‚âÉ‚Çó·µ¢[ùïú] ((s : S) ‚Üí A (Sum.inl s)) √ó ((t : T) ‚Üí A (Sum.inr t)) :=
  sorry

theorem helper_lemma‚Çâ
    {f : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù} {n m : ‚Ñï} (h‚ÇÅ : Integrable f volume)
    (h‚ÇÇ :Œπ ‚âÉ ULift.{u, 0} (Fin n) ‚äï ULift.{u, 0} (Fin m)) :
    Integrable
      (f ‚àò ‚áë(MeasurableEquiv.piCongrLeft (fun x ‚Ü¶ ‚Ñù) h‚ÇÇ.symm) ‚àò
        ‚áë(MeasurableEquiv.sumPiEquivProdPi fun x ‚Ü¶ ‚Ñù).symm ‚àò Prod.swap)
      (volume.prod volume) := by
  rw [‚Üê piCongrLeft_linearIsometryEquiv_measurableEquiv_coe ‚Ñù]
  sorry

universe u in
theorem prekopa_leindler'
    {Œπ : Type u} [Fintype Œπ]
    {t : ‚Ñù} (ht‚ÇÅ : 0 < t) (ht‚ÇÇ : t < 1)
    {f : EuclideanSpace ‚Ñù Œπ ‚Üí ‚Ñù} (hf‚ÇÅ : Integrable f) (hf‚ÇÇ : 0 ‚â§ f)
    {g : EuclideanSpace ‚Ñù Œπ ‚Üí ‚Ñù} (hg‚ÇÅ : Integrable g) (hg‚ÇÇ : 0 ‚â§ g)
    {h : EuclideanSpace ‚Ñù Œπ ‚Üí ‚Ñù} (hh‚ÇÅ : Integrable h)
    (h‚ÇÄ : ‚àÄ {x y}, (f x) ^ (1 - t) * (g y) ^ t ‚â§ h (x + y)) :
    (‚à´ x, f x) ^ (1 - t) * (‚à´ y, g y) ^ t ‚â§
    (1 - t) ^ ((1 - t) * Fintype.card Œπ) * t ^ (t * Fintype.card Œπ) * (‚à´ z, h z) := by
  induction h‚ÇÅ : Fintype.card Œπ using Nat.induction_on_add generalizing Œπ
  case hzero =>
    rw [Fintype.card_eq_zero_iff] at h‚ÇÅ
    simp [h‚ÇÅ]
    nth_rw 3 [‚Üê add_zero 0]
    exact h‚ÇÄ
  case hone => sorry
  case hadd n hn m hm i =>
    simp_rw [helper_lemma‚ÇÅ f, helper_lemma‚ÇÅ g, helper_lemma‚ÇÅ h]
    rw [helper_lemma‚ÇÇ] at hf‚ÇÅ hg‚ÇÅ hh‚ÇÅ
    simp only [EuclideanSpace, PiLp, WithLp] at f g h hn hm h‚ÇÄ
    have h‚ÇÇ := helper_def‚ÇÅ ((h‚ÇÅ ‚ñ∏ Fintype.equivFin Œπ).trans finSumFinEquiv.symm)
    rw [‚Üê Fintype.card_fin n, ‚Üê Fintype.card_fin m]
    simp_rw [‚Üê helper_lemma‚ÇÉ h‚ÇÇ.symm, helper_lemma‚ÇÑ, Measure.volume_eq_prod]
    rw [integral_prod, integral_prod, integral_prod]
    ¬∑ let F : (ULift.{u} (Fin n) ‚Üí ‚Ñù) ‚Üí ‚Ñù := fun x ‚Ü¶ ‚à´ (y : ULift.{u} (Fin m) ‚Üí ‚Ñù), f
        ((MeasurableEquiv.piCongrLeft (fun _ ‚Ü¶ ‚Ñù) h‚ÇÇ).symm
          ((MeasurableEquiv.sumPiEquivProdPi _).symm (x, y)))
      have hF‚ÇÅ : Integrable F := helper_lemma‚Çá h‚ÇÇ hf‚ÇÅ
      have hF‚ÇÇ : 0 ‚â§ F := helper_lemma‚Çà h‚ÇÇ hf‚ÇÇ
      let G : (ULift.{u} (Fin n) ‚Üí ‚Ñù) ‚Üí ‚Ñù := fun x ‚Ü¶ ‚à´ (y : ULift.{u} (Fin m) ‚Üí ‚Ñù), g
        ((MeasurableEquiv.piCongrLeft (fun _ ‚Ü¶ ‚Ñù) h‚ÇÇ).symm
          ((MeasurableEquiv.sumPiEquivProdPi _).symm (x, y)))
      have hG‚ÇÅ : Integrable G := helper_lemma‚Çá h‚ÇÇ hg‚ÇÅ
      have hG‚ÇÇ : 0 ‚â§ G := helper_lemma‚Çà h‚ÇÇ hg‚ÇÇ
      let H : (ULift.{u} (Fin n) ‚Üí ‚Ñù) ‚Üí ‚Ñù := fun x ‚Ü¶
        (1 - t) ^ ((1 - t) * m) *
        t ^ (t * m) *
        ‚à´ (y : ULift.{u} (Fin m) ‚Üí ‚Ñù), h
          ((MeasurableEquiv.piCongrLeft (fun _ ‚Ü¶ ‚Ñù) h‚ÇÇ).symm
            ((MeasurableEquiv.sumPiEquivProdPi _).symm (x, y)))
      have hH‚ÇÅ : Integrable H := Integrable.const_mul (helper_lemma‚Çá h‚ÇÇ hh‚ÇÅ) _
      have h‚ÇÉ := hn ((helper_lemma‚ÇÇ _).mpr hF‚ÇÅ) hF‚ÇÇ ((helper_lemma‚ÇÇ _).mpr hG‚ÇÅ) hG‚ÇÇ
        ((helper_lemma‚ÇÇ _).mpr hH‚ÇÅ) ?_ (by simp)
      -- have h‚ÇÉ : ‚àÄ {x y}, (F x) ^ (1 - t) * (G y) ^ t ‚â§ H (x + y) := by
      --   sorry
        -- simp [F, G, H]
        -- intro x y
        -- simp_rw [‚Üê @Function.comp_apply _ _ _ f, ‚Üê @Function.comp_apply _ _ _ g,
        --   ‚Üê @Function.comp_apply _ _ _ h, ‚Üê @Function.comp_apply _ _ _ (_ ‚àò _),
        --   @Function.comp_apply _ _ _ _ (Prod.mk _)]
        -- simp_rw [‚Üê @Prod.swap_prod_mk _ _ _ x, ‚Üê @Prod.swap_prod_mk _ _ _ y,
        --   ‚Üê @Prod.swap_prod_mk _ _ _ (x + y)]
        -- simp_rw [‚Üê @Function.comp_apply _ _ _ Prod.swap, ‚Üê @Function.comp_apply _ _ _ _ (_ ‚àò _)]
        -- sorry
      -- have h‚ÇÑ := hn ((helper_lemma‚ÇÇ _).mpr hF‚ÇÅ) hF‚ÇÇ ((helper_lemma‚ÇÇ _).mpr hG‚ÇÅ) hG‚ÇÇ
      --   ((helper_lemma‚ÇÇ _).mpr hH‚ÇÅ) h‚ÇÉ (by simp)
      
      ¬∑ simp only [Prod.mk.eta, Fintype.card_fin, Nat.cast_add] at h‚ÇÉ ‚ä¢
        have h‚ÇÑ {x : ‚Ñù} (hx : 0 < x) {n m : ‚Ñï} : x ^ (x * (n + m)) = x ^ (x * n) * x ^ (x * m) := by
          rw [mul_add x, Real.rpow_add hx]
        rw [h‚ÇÑ ht‚ÇÅ, h‚ÇÑ (by linarith : 0 < 1 - t), mul_comm ((1 - t) ^ _), mul_comm (t ^ _),
          ‚Üê mul_assoc, mul_assoc ((1 - t) ^ _), mul_comm ((1 - t) ^ _) (t ^ _), ‚Üê mul_assoc,
          mul_assoc _ ((1 - t) ^ _) (t ^ _), mul_assoc (((1 - t) ^ _) * (t ^ _)),
          ‚Üê integral_mul_left]
        simp_rw [‚Üê integral_mul_left ((1 - t) ^ ((1 - t) * n) * t ^ (t * n))]
        rw [‚Üê @integral_integral_swap _ _ _ _ _ _ _ _ _ _ _ (fun _ _ ‚Ü¶ _ * _)]
        rw [‚Üê @integral_integral_swap _ _ _ _ _ _ _ _ _ _ _ (fun _ _ ‚Ü¶ f _),
          ‚Üê @integral_integral_swap _ _ _ _ _ _ _ _ _ _ _ (fun _ _ ‚Ü¶ g _)]
        simp_rw [‚Üê helper_lemma‚ÇÅ]
        apply hm _ _ _ _ _ _ (by simp)
        ¬∑ -- rw [Measure.volume_eq_prod]
          -- apply Integrable.integral_prod_right
          sorry
        ¬∑ intro; apply integral_nonneg; intro; apply hf‚ÇÇ
        ¬∑ sorry
        ¬∑ intro; apply integral_nonneg; intro; apply hg‚ÇÇ
        ¬∑ sorry
        ¬∑ sorry
        ¬∑ simp_rw [‚Üê @Function.comp_apply _ _ _ g, ‚Üê @Function.comp_apply _ _ _ (g ‚àò _)]
          rw [uncurry_prod_swap]
          sorry
        ¬∑ sorry
        ¬∑ sorry
      ¬∑ sorry
    all_goals (refine (integrable_prod_iff ?_).mpr ‚ü®?_, ?_‚ü©)
    ¬∑ let p‚ÇÅ:= (helper_lemma‚ÇÜ' h‚ÇÇ h).mp hh‚ÇÅ;
      let p‚ÇÇ:= (helper_lemma‚ÇÖ _ ).mp p‚ÇÅ;
      simp [Function.comp] at p‚ÇÇ
      simp [Integrable] at p‚ÇÇ
      exact (And.left p‚ÇÇ)

    ¬∑ let p‚ÇÅ:= (helper_lemma‚ÇÜ' h‚ÇÇ h).mp hh‚ÇÅ;
      let p‚ÇÇ:= (helper_lemma‚ÇÖ _ ).mp p‚ÇÅ;
      let p‚ÇÉ:= (MeasureTheory.Integrable.prod_right_ae p‚ÇÇ);
      simp [Function.comp] at p‚ÇÉ
      exact p‚ÇÉ

    ¬∑ let p‚ÇÅ:= (helper_lemma‚ÇÜ' h‚ÇÇ h).mp hh‚ÇÅ;
      let p‚ÇÇ:= (helper_lemma‚ÇÖ _ ).mp p‚ÇÅ;
      let p‚ÇÉ:= MeasureTheory.Integrable.norm p‚ÇÇ;
      let p‚ÇÑ:= Integrable.integral_prod_left p‚ÇÉ;
      simp [Function.comp] at p‚ÇÑ
      exact p‚ÇÑ

    ¬∑ let p‚ÇÅ:= (helper_lemma‚ÇÜ' h‚ÇÇ g).mp hg‚ÇÅ;
      let p‚ÇÇ:= (helper_lemma‚ÇÖ _ ).mp p‚ÇÅ;
      simp [Function.comp] at p‚ÇÇ
      simp [Integrable] at p‚ÇÇ
      exact (And.left p‚ÇÇ)

    ¬∑ let p‚ÇÅ:= (helper_lemma‚ÇÜ' h‚ÇÇ g).mp hg‚ÇÅ;
      let p‚ÇÇ:= (helper_lemma‚ÇÖ _ ).mp p‚ÇÅ;
      let p‚ÇÉ:= (MeasureTheory.Integrable.prod_right_ae p‚ÇÇ);
      simp [Function.comp] at p‚ÇÉ
      exact p‚ÇÉ

    ¬∑ let p‚ÇÅ:= (helper_lemma‚ÇÜ' h‚ÇÇ g).mp hg‚ÇÅ;
      let p‚ÇÇ:= (helper_lemma‚ÇÖ _ ).mp p‚ÇÅ;
      let p‚ÇÉ:= MeasureTheory.Integrable.norm p‚ÇÇ;
      let p‚ÇÑ:= Integrable.integral_prod_left p‚ÇÉ;
      simp [Function.comp] at p‚ÇÑ
      exact p‚ÇÑ

    ¬∑ let p‚ÇÅ:= (helper_lemma‚ÇÜ' h‚ÇÇ f).mp hf‚ÇÅ;
      let p‚ÇÇ:= (helper_lemma‚ÇÖ _ ).mp p‚ÇÅ;
      simp [Function.comp] at p‚ÇÇ
      simp [Integrable] at p‚ÇÇ
      exact (And.left p‚ÇÇ)

    ¬∑ let p‚ÇÅ:= (helper_lemma‚ÇÜ' h‚ÇÇ f).mp hf‚ÇÅ;
      let p‚ÇÇ:= (helper_lemma‚ÇÖ _ ).mp p‚ÇÅ;
      let p‚ÇÉ:= (MeasureTheory.Integrable.prod_right_ae p‚ÇÇ);
      simp [Function.comp] at p‚ÇÉ
      exact p‚ÇÉ

    ¬∑ let p‚ÇÅ:= (helper_lemma‚ÇÜ' h‚ÇÇ f).mp hf‚ÇÅ;
      let p‚ÇÇ:= (helper_lemma‚ÇÖ _ ).mp p‚ÇÅ;
      let p‚ÇÉ:= MeasureTheory.Integrable.norm p‚ÇÇ;
      let p‚ÇÑ:= Integrable.integral_prod_left p‚ÇÉ;
      simp [Function.comp] at p‚ÇÑ
      exact p‚ÇÑ

end
